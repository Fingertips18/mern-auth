name: PR Quality Checks

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'github/**'
      - 'backend/**'
      - 'frontend/**'
      - 'public/**'
      - '.env.**'
      - '**.md'
      - '.gitignore'
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  quality-checks:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.jobs
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci && cd frontend && npm ci

      - name: Prettier Check
        run: |
          echo "üé® Checking code formatting..."
          npx prettier --check .
          if [ $? -ne 0 ]; then
            echo ""
            echo "‚ùå Code formatting check failed!"
            echo 'Please run "npm run format" to fix formatting issues.'
            exit 1
          fi
            echo "‚úÖ Code formatting is correct!"

      - name: ESLint Check
        run: |
          echo "üîß Running ESLint checks..."
          npm run lint && cd frontend && npm run lint
          echo "‚úÖ ESLint checks passed!"

      - name: Build Check
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
        run: npm run build

  security-scan:
    name: Security scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Npm Audit Check
        run: |
          echo "üîí Running npm security audit..."
          npm audit --audit-level=high
          echo "‚úÖ NPM audit completed!"

      - name: Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Trivy for SARIF Output
        uses: aquasecurity/trivy-action@master
        if: github.event_name == 'push'
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan results
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name == 'push' && always()
        with:
          sarif_file: 'trivy-results.sarif'
